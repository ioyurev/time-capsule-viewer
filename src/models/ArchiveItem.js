/**
 * –ú–æ–¥–µ–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞ –∞—Ä—Ö–∏–≤–∞
 */
export class ArchiveItem {
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä —ç–ª–µ–º–µ–Ω—Ç–∞ –∞—Ä—Ö–∏–≤–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {string} config.filename - –ò–º—è —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤–µ
     * @param {string} config.type - –¢–∏–ø —Ñ–∞–π–ª–∞
     * @param {string} config.title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
     * @param {string} config.description - –û–ø–∏—Å–∞–Ω–∏–µ
     * @param {string} config.date - –î–∞—Ç–∞
     * @param {string[]} config.tags - –¢–µ–≥–∏
     * @param {string} config.author - –ê–≤—Ç–æ—Ä (–¥–ª—è —Ç–∏–ø–∞ –ö–ê–ü–°–£–õ–ê)
     */
    constructor(config = {}) {
        this.filename = config.filename || '';
        this.type = config.type || '';
        this.title = config.title || '';
        this.description = config.description || '';
        this.date = config.date || '';
        this.tags = Array.isArray(config.tags) ? config.tags : [];
        this.author = config.author || ''; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ author –¥–ª—è —Ç–∏–ø–∞ –ö–ê–ü–°–£–õ–ê
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        this.validate();
    }

    /**
     * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∞—Ä—Ö–∏–≤–∞
     * @returns {Object} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    validate() {
        const errors = [];

        if (!this.filename) {
            errors.push('–ò–º—è —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        }

        if (!this.type) {
            errors.push('–¢–∏–ø —Ñ–∞–π–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }

        if (!this.date) {
            errors.push('–î–∞—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞');
        }

        if (!Array.isArray(this.tags)) {
            errors.push('–¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
        }

        return {
            isValid: errors.length === 0,
            errors
        };
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç—å—é
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç—å—é
     */
    isNews() {
        return this.type.toUpperCase() === '–ù–û–í–û–°–¢–¨';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º
     */
    isMedia() {
        return this.type.toUpperCase() === '–ú–ï–î–ò–ê';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ª–∏—á–Ω—ã–º —Ñ–∞–π–ª–æ–º
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –ª–∏—á–Ω—ã–º —Ñ–∞–π–ª–æ–º
     */
    isPersonal() {
        return this.type.toUpperCase() === '–õ–ò–ß–ù–û–ï';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–µ–º–æ–º
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –º–µ–º–æ–º
     */
    isMeme() {
        return this.type.toUpperCase() === '–ú–ï–ú';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç PDF —Ñ–∞–π–ª–æ–º
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª PDF
     */
    isPdf() {
        return this.filename.toLowerCase().endsWith('.pdf');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
     */
    isImage() {
        const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg'];
        return imageExtensions.some(ext => this.filename.toLowerCase().endsWith(ext));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∞—É–¥–∏–æ
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∞—É–¥–∏–æ
     */
    isAudio() {
        const audioExtensions = ['.mp3', '.wav', '.ogg', '.m4a', '.aac', '.flac'];
        return audioExtensions.some(ext => this.filename.toLowerCase().endsWith(ext));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–µ–æ
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
     */
    isVideo() {
        const videoExtensions = ['.mp4', '.webm', '.avi', '.mov', '.wmv', '.flv'];
        return videoExtensions.some(ext => this.filename.toLowerCase().endsWith(ext));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–ø—Å—É–ª—ã
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –æ–ø–∏—Å–∞–Ω–∏–µ–º –∫–∞–ø—Å—É–ª—ã
     */
    isCapsule() {
        return this.type.toUpperCase() === '–ö–ê–ü–°–£–õ–ê';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–º
     */
    isText() {
        return this.filename.toLowerCase().endsWith('.txt');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç CSV —Ñ–∞–π–ª–æ–º
     * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª CSV
     */
    isCsv() {
        return this.filename.toLowerCase().endsWith('.csv');
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     * @returns {string} –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     */
    getFileExtension() {
        const parts = this.filename.split('.');
        return parts.length > 1 ? '.' + parts.pop().toLowerCase() : '';
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–µ–≥–æ–≤
     * @param {number} minCount - –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
     * @returns {boolean} –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Ç–µ–≥–æ–≤
     */
    hasMinimumTags(minCount = 5) {
        return this.tags.length >= minCount;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
     * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
     */
    getTagCount() {
        return this.tags.length;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥
     * @param {string} tag - –¢–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
     */
    addTag(tag) {
        if (typeof tag === 'string' && !this.tags.includes(tag.trim())) {
            this.tags.push(tag.trim());
        }
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç —Ç–µ–≥
     * @param {string} tag - –¢–µ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    removeTag(tag) {
        this.tags = this.tags.filter(t => t !== tag);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ç–µ–≥–∞
     * @param {string} tag - –¢–µ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
     * @returns {boolean} –°–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Ç–µ–≥
     */
    hasTag(tag) {
        return this.tags.includes(tag);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @returns {string} –≠–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞
     */
    getTypeEmoji() {
        const typeMap = {
            '–ù–û–í–û–°–¢–¨': 'üì∞',
            '–ú–ï–î–ò–ê': 'üé¨',
            '–ú–ï–ú': 'üòÇ',
            '–§–û–¢–û': 'üì∏',
            '–í–ò–î–ï–û': 'üé•',
            '–ê–£–î–ò–û': 'üéµ',
            '–î–û–ö–£–ú–ï–ù–¢': 'üìÑ',
            '–¢–ï–ö–°–¢': 'üìù',
            '–ö–ê–†–¢–ò–ù–ö–ê': 'üñºÔ∏è',
            '–°–´–õ–ö–ê': 'üîó',
            '–°–û–ë–´–¢–ò–ï': 'üìÖ',
            '–õ–ò–ß–ù–û–ï': 'üë§',
            '–û–ë–£–ß–ï–ù–ò–ï': 'üìö',
            '–†–ê–ë–û–¢–ê': 'üíº',
            '–•–û–ë–ë–ò': 'üé®'
        };
        return typeMap[this.type.toUpperCase()] || 'üìÅ';
    }

    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –æ–±—ä–µ–∫—Ç –¥–ª—è JSON
     * @returns {Object} –û–±—ä–µ–∫—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    toJSON() {
        return {
            filename: this.filename,
            type: this.type,
            title: this.title,
            description: this.description,
            date: this.date,
            tags: [...this.tags],
            author: this.author // –î–æ–±–∞–≤–ª—è–µ–º author –≤ JSON
        };
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –æ–±—ä–µ–∫—Ç–∞
     * @param {Object} obj - –û–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
     * @returns {ArchiveItem} –≠–∫–∑–µ–º–ø–ª—è—Ä ArchiveItem
     */
    static fromObject(obj) {
        return new ArchiveItem(obj);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å—Ç—Ä–æ–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
     * @param {string} line - –°—Ç—Ä–æ–∫–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
     * @returns {ArchiveItem} –≠–∫–∑–µ–º–ø–ª—è—Ä ArchiveItem
     */
    static fromManifestLine(line) {
        const parts = line.split('|').map(part => part.trim());
        
        if (parts.length < 4) {
            throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞');
        }

        const filename = parts[0];
        const type = parts[1];
        const isPdf = filename.toLowerCase().endsWith('.pdf');
        const isCapsule = type.toUpperCase() === '–ö–ê–ü–°–£–õ–ê';
        
        let title, description, date, tags, author;
        
        if (isCapsule && parts.length === 4) {
            // –§–æ—Ä–º–∞—Ç –ö–ê–ü–°–£–õ–ê: –∏–º—è —Ñ–∞–π–ª–∞ | –ö–ê–ü–°–£–õ–ê | –∞–≤—Ç–æ—Ä | –¥–∞—Ç–∞
            author = parts[2];
            date = parts[3];
            title = '';
            description = '';
            tags = [];
        } else if (isPdf && parts.length === 4) {
            // –§–æ—Ä–º–∞—Ç PDF: –∏–º—è —Ñ–∞–π–ª–∞ | —Ç–∏–ø | –¥–∞—Ç–∞ | —Ç–µ–≥–∏
            date = parts[2];
            tags = parts[3].split(',').map(tag => tag.trim());
            title = '';
            description = '';
        } else if (parts.length >= 6) {
            // –§–æ—Ä–º–∞—Ç: –∏–º—è —Ñ–∞–π–ª–∞ | —Ç–∏–ø | –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –æ–ø–∏—Å–∞–Ω–∏–µ | –¥–∞—Ç–∞ | —Ç–µ–≥–∏
            title = parts[2];
            description = parts[3];
            date = parts[4];
            tags = parts[5].split(',').map(tag => tag.trim());
        } else {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞');
        }

        return new ArchiveItem({
            filename,
            type,
            title,
            description,
            date,
            tags,
            author // –î–æ–±–∞–≤–ª—è–µ–º author –¥–ª—è –ö–ê–ü–°–£–õ–ê
        });
    }
}
