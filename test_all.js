import JSZip from 'jszip';
import fs from 'fs/promises';
import { ImageService } from './src/services/ImageService.js';
import { DigitalTimeCapsule } from './src/core/DigitalTimeCapsule.js';
import { ArchiveValidator } from './src/core/ArchiveValidator.js';
import { PDFService } from './src/services/PDFService.js';

class ComprehensiveTest {
    constructor() {
        this.testsPassed = 0;
        this.testsFailed = 0;
        this.totalTests = 0;
    }

    logTest(name, result, details = '') {
        this.totalTests++;
        if (result) {
            this.testsPassed++;
            console.log(`‚úÖ ${name}: –ü–†–û–ô–î–ï–ù`);
        } else {
            this.testsFailed++;
            console.log(`‚ùå ${name}: –ù–ï –ü–†–û–ô–î–ï–ù ${details}`);
        }
    }

    async run() {
        console.log('=== –ó–ê–ü–£–°–ö –ö–û–ú–ü–õ–ï–ö–°–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===\n');

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤
            console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ example/example.zip...');
            const zipBuffer = await fs.readFile('./example/example.zip');
            console.log('–§–∞–π–ª ZIP –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä:', zipBuffer.length, '–±–∞–π—Ç');

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –ø–æ–º–æ—â—å—é JSZip
            const zip = await JSZip.loadAsync(zipBuffer);
            console.log('ZIP –∞—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω\n');

            // –¢–µ—Å—Ç 1: –ü–∞—Ä—Å–∏–Ω–≥ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            await this.testManifestParsing(zip);

            // –¢–µ—Å—Ç 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∞
            await this.testArchiveValidation(zip);

            // –¢–µ—Å—Ç 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤
            await this.testPDFProcessing(zip);

            // –¢–µ—Å—Ç 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            await this.testImageProcessing(zip);

            // –¢–µ—Å—Ç 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤
            await this.testOtherFileTypes(zip);

            // –¢–µ—Å—Ç 6: –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞
            await this.testArchiveIntegrity(zip);

            // –ò—Ç–æ–≥–∏
            console.log('\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===');
            console.log(`–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.totalTests}`);
            console.log(`–ü—Ä–æ–π–¥–µ–Ω–æ: ${this.testsPassed}`);
            console.log(`–ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${this.testsFailed}`);
            console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((this.testsPassed / this.totalTests) * 100).toFixed(1)}%`);

            if (this.testsFailed === 0) {
                console.log('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
            } else {
                console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã');
            }

        } catch (error) {
            console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
            console.error('Stack trace:', error.stack);
        }
    }

    async testManifestParsing(zip) {
        console.log('\n--- –¢–ï–°–¢ 1: –ü–ê–†–°–ò–ù–ì –ú–ê–ù–ò–§–ï–°–¢–ê ---');
        
        try {
            const manifestFile = zip.file('manifest.txt');
            if (!manifestFile) {
                this.logTest('–ù–∞–ª–∏—á–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞', false, '- —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const manifestText = await manifestFile.async('text');
            console.log('–ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–∞–π–¥–µ–Ω –∏ –ø—Ä–æ—á–∏—Ç–∞–Ω:');
            console.log('------------------------');
            console.log(manifestText);
            console.log('------------------------');

            // –ü–∞—Ä—Å–∏–Ω–≥ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ - –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å | —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
            const lines = manifestText.split('\n')
                .map(line => line.replace(/\r$/, ''))
                .filter(line => line.trim() !== '');
            
            const items = [];
            for (const line of lines) {
                const parts = line.split(' | ');
                if (parts.length >= 3) {
                    let filename = parts[0].trim();
                    let type = parts[1].trim();
                    let title = parts[2].trim();
                    let description = parts.length > 3 ? parts[3].trim() : '';
                    let date = parts.length > 4 ? parts[4].trim() : '';
                    let keywords = parts.length > 5 ? parts[5].trim() : '';
                    
                    if (filename.includes('|')) {
                        const filenameParts = filename.split('|');
                        filename = filenameParts[0].trim();
                        if (filenameParts.length > 1) {
                            type = filenameParts[1].trim() + (type ? ' ' + type : '');
                        }
                    }
                    
                    items.push({ 
                        filename, type, title, description, date, 
                        tags: keywords ? keywords.split(',').map(tag => tag.trim()) : []
                    });
                }
            }

            this.logTest('–ü–∞—Ä—Å–∏–Ω–≥ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞', items.length > 0, `- –Ω–∞–π–¥–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
            
            if (items.length > 0) {
                console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
                items.forEach((item, index) => {
                    console.log(`${index + 1}. ${item.filename} (${item.type}) - ${item.title}`);
                });
            }

        } catch (error) {
            this.logTest('–ü–∞—Ä—Å–∏–Ω–≥ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞', false, `- –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    async testArchiveValidation(zip) {
        console.log('\n--- –¢–ï–°–¢ 2: –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–†–•–ò–í–ê ---');
        
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø–∞—Ä—Å–∏–º –º–∞–Ω–∏—Ñ–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞—Ä—Ö–∏–≤–∞
            const manifestFile = zip.file('manifest.txt');
            if (!manifestFile) {
                this.logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∞', false, '- –º–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            const manifestText = await manifestFile.async('text');
            const validator = new ArchiveValidator(null); // –ø–µ—Ä–µ–¥–∞–µ–º null –∫–∞–∫ parent –¥–ª—è —Ç–µ—Å—Ç–∞
            const { items, errors } = validator.parseManifest(manifestText);
            
            // –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∞—Ä—Ö–∏–≤–∞
            validator.validateArchive(items);
            
            this.logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∞', errors.length === 0, 
                errors.length > 0 ? `- –æ—à–∏–±–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: ${errors.length}` : '');
            
            if (errors.length > 0) {
                console.log('–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:');
                errors.forEach(error => {
                    console.log(`- –°—Ç—Ä–æ–∫–∞ ${error.lineNumber}: ${error.error}`);
                });
            }

        } catch (error) {
            this.logTest('–í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∞', false, `- –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    async testPDFProcessing(zip) {
        console.log('\n--- –¢–ï–°–¢ 3: –û–ë–†–ê–ë–û–¢–ö–ê PDF –§–ê–ô–õ–û–í ---');
        
        try {
            // –ù–∞—Ö–æ–¥–∏–º PDF —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ
            const pdfFiles = Object.keys(zip.files).filter(filename => 
                filename.toLowerCase().endsWith('.pdf')
            );

            this.logTest('–ù–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–æ–≤', pdfFiles.length > 0, `- –Ω–∞–π–¥–µ–Ω–æ ${pdfFiles.length}`);
            
            if (pdfFiles.length > 0) {
                console.log('PDF —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ:');
                for (const pdfFile of pdfFiles) {
                    console.log(`- ${pdfFile}`);
                    
                    try {
                        const file = zip.file(pdfFile);
                        const arrayBuffer = await file.async('arraybuffer');
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ PDF
                        const metadata = await PDFService.extractMetadata(arrayBuffer);
                        const keywords = await PDFService.extractKeywords(arrayBuffer);
                        const normalizedMetadata = await PDFService.getNormalizedMetadata(arrayBuffer);
                        
                        this.logTest(`–ó–∞–≥—Ä—É–∑–∫–∞ PDF: ${pdfFile}`, true);
                        
                        console.log(`  - –ù–∞–ª–∏—á–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${!!metadata}`);
                        console.log(`  - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${keywords.length > 0 ? keywords.join(', ') : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
                        console.log(`  - –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${normalizedMetadata.hasKeywords ? '–Ω–∞–π–¥–µ–Ω—ã' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);
                        
                        // –¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                        this.logTest(`–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: ${pdfFile}`, true, 
                            keywords.length > 0 ? ` - –Ω–∞–π–¥–µ–Ω–æ ${keywords.length} –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤` : ' - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                        
                        // –¢–µ—Å—Ç –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                        this.logTest(`–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${pdfFile}`, true, 
                            normalizedMetadata.hasKeywords ? ' - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω—ã' : ' - –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                        
                        if (metadata && metadata.info) {
                            console.log(`  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${metadata.info.Title || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
                            console.log(`  - –ê–≤—Ç–æ—Ä: ${metadata.info.Author || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
                            console.log(`  - –¢–µ–º–∞: ${metadata.info.Subject || '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
                            console.log(`  - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${metadata.info.Keywords || '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
                        }

                    } catch (error) {
                        this.logTest(`–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF: ${pdfFile}`, false, `- –æ—à–∏–±–∫–∞: ${error.message}`);
                    }
                }
            }

        } catch (error) {
            this.logTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF —Ñ–∞–π–ª–æ–≤', false, `- –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    async testImageProcessing(zip) {
        console.log('\n--- –¢–ï–°–¢ 4: –û–ë–†–ê–ë–û–¢–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ---');
        
        try {
            // –ù–∞—Ö–æ–¥–∏–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤–µ
            const imageFiles = Object.keys(zip.files).filter(filename => {
                const ext = filename.toLowerCase().split('.').pop();
                return ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp'].includes(ext);
            });

            this.logTest('–ù–∞–ª–∏—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', imageFiles.length > 0, `- –Ω–∞–π–¥–µ–Ω–æ ${imageFiles.length}`);
            
            if (imageFiles.length > 0) {
                console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤–µ:');
                for (const imageFile of imageFiles) {
                    console.log(`- ${imageFile}`);
                    
                    try {
                        const file = zip.file(imageFile);
                        const uint8Array = await file.async('uint8array');
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                        const metadata = await ImageService.extractMetadata(uint8Array);
                        const hasMetadata = ImageService.hasMetadata(metadata);
                        const displayMetadata = ImageService.getDisplayMetadata(metadata);
                        
                        this.logTest(`–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${imageFile}`, true, 
                            hasMetadata ? ' - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã' : ' - –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                        
                        console.log(`  - –ù–∞–ª–∏—á–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${hasMetadata}`);
                        console.log(`  - –ó–∞–≥–æ–ª–æ–≤–æ–∫: ${displayMetadata.title || '–Ω–µ –Ω–∞–π–¥–µ–Ω'}`);
                        console.log(`  - –û–ø–∏—Å–∞–Ω–∏–µ: ${displayMetadata.description || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'}`);
                        console.log(`  - –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${displayMetadata.keywords ? displayMetadata.keywords.join(', ') : '–Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}`);
                        
                        if (metadata && metadata.raw) {
                            console.log(`  - –ë–ª–æ–∫–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${Object.keys(metadata.raw).join(', ')}`);
                        }

                    } catch (error) {
                        this.logTest(`–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö: ${imageFile}`, false, `- –æ—à–∏–±–∫–∞: ${error.message}`);
                    }
                }
            }

        } catch (error) {
            this.logTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', false, `- –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    async testOtherFileTypes(zip) {
        console.log('\n--- –¢–ï–°–¢ 5: –û–ë–†–ê–ë–û–¢–ö–ê –î–†–£–ì–ò–• –¢–ò–ü–û–í –§–ê–ô–õ–û–í ---');
        
        try {
            const otherFiles = Object.keys(zip.files).filter(filename => {
                const ext = filename.toLowerCase().split('.').pop();
                return !['pdf', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'txt', 'manifest'].includes(ext);
            });

            this.logTest('–ù–∞–ª–∏—á–∏–µ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤', otherFiles.length > 0, `- –Ω–∞–π–¥–µ–Ω–æ ${otherFiles.length}`);
            
            if (otherFiles.length > 0) {
                console.log('–î—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ:');
                for (const file of otherFiles) {
                    console.log(`- ${file} (${zip.files[file].dir ? '–ø–∞–ø–∫–∞' : '—Ñ–∞–π–ª'})`);
                }
            }

        } catch (error) {
            this.logTest('–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤', false, `- –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }

    async testArchiveIntegrity(zip) {
        console.log('\n--- –¢–ï–°–¢ 6: –¶–ï–õ–û–°–¢–ù–û–°–¢–¨ –ê–†–•–ò–í–ê ---');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å
            const allFiles = Object.keys(zip.files);
            let filesReadSuccessfully = 0;
            let filesFailed = 0;

            for (const filename of allFiles) {
                if (!zip.files[filename].dir) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏
                    try {
                        const file = zip.file(filename);
                        const content = await file.async('uint8array');
                        filesReadSuccessfully++;
                    } catch (error) {
                        filesFailed++;
                        console.log(`  - –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${filename}: ${error.message}`);
                    }
                }
            }

            const successRate = (filesReadSuccessfully / (filesReadSuccessfully + filesFailed)) * 100;
            this.logTest('–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞', filesFailed === 0, 
                `- —É—Å–ø–µ—à–Ω–æ: ${filesReadSuccessfully}, –æ—à–∏–±–∫–∏: ${filesFailed}, —É—Å–ø–µ—Ö: ${successRate.toFixed(1)}%`);

        } catch (error) {
            this.logTest('–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –∞—Ä—Ö–∏–≤–∞', false, `- –æ—à–∏–±–∫–∞: ${error.message}`);
        }
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
const test = new ComprehensiveTest();
test.run().then(() => {
    console.log('\n=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===');
}).catch((error) => {
    console.error('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π:', error);
});
