//–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PDF.js –¥–ª—è CDN –≤–µ—Ä—Å–∏–∏
pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';

// –ò–º–ø–æ—Ä—Ç –ª–æ–≥–≥–µ—Ä–∞ (–≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∏–∑ src/logger.js)
// –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤–æ–π –∫–∞–ø—Å—É–ª–æ–π –≤—Ä–µ–º–µ–Ω–∏
class DigitalTimeCapsule {
    constructor() {
        this.zip = null;
        this.imageUrls = [];
        this.videoUrls = [];
        this.audioUrls = [];
        this.pdfUrls = [];
        this.csvUrls = [];
        this.textUrls = [];
        this.defaultUrls = [];
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
        this.logger = window.logger || console;
        this.logger.info('DigitalTimeCapsule –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', {
            userAgent: navigator.userAgent,
            timestamp: new Date().toISOString()
        });
        
        this.initializeEventListeners();
        this.initializeTheme();
        this.clearGlobalStatus(); // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ–º—ã
    initializeTheme() {
        const operationId = this.logger.pushOperation('initializeTheme');
        try {
            const savedTheme = localStorage.getItem('theme');
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            
            if (savedTheme) {
                document.body.setAttribute('data-theme', savedTheme);
                this.logger.debug('–¢–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ localStorage', { theme: savedTheme });
            } else if (systemPrefersDark) {
                document.body.setAttribute('data-theme', 'dark');
                this.logger.debug('–¢–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º', { systemPrefersDark: true });
            } else {
                document.body.setAttribute('data-theme', 'light');
                this.logger.debug('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            }
            
            this.updateThemeToggleIcon();
            this.logger.info('–¢–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ', { operationId });
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–º—ã', { error: error.message, operationId });
            throw error;
        } finally {
            this.logger.popOperation();
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        const currentTheme = document.body.getAttribute('data-theme');
        const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
        
        document.body.setAttribute('data-theme', newTheme);
        localStorage.setItem('theme', newTheme);
        this.updateThemeToggleIcon();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
    updateThemeToggleIcon() {
        const themeToggle = document.getElementById('theme-toggle');
        const currentTheme = document.body.getAttribute('data-theme');
        
        if (themeToggle) {
            themeToggle.innerHTML = currentTheme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
            themeToggle.setAttribute('aria-label', 
                currentTheme === 'dark' ? '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É' : '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤ —Ç–µ–º–Ω—É—é —Ç–µ–º—É'
            );
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π
    initializeEventListeners() {
        const operationId = this.logger.pushOperation('initializeEventListeners');
        try {
            const uploadInput = document.getElementById('zipUpload');
            const themeToggle = document.getElementById('theme-toggle');
            
            if (uploadInput) {
                uploadInput.addEventListener('change', (event) => {
                    this.logger.trackUserAction('file_selected', { 
                        fileName: event.target.files[0]?.name,
                        fileSize: event.target.files[0]?.size
                    });
                    this.handleZipUpload(event)
                        .catch(error => this.showError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}`));
                });
                this.logger.debug('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ ZIP —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω');
            }

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã
            if (themeToggle) {
                themeToggle.addEventListener('click', () => {
                    this.toggleTheme();
                });
                this.logger.debug('–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º—ã –¥–æ–±–∞–≤–ª–µ–Ω');
            }

            // –û—á–∏—Å—Ç–∫–∞ URL –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            window.addEventListener('beforeunload', () => {
                this.cleanupUrls();
            });

            // –û—á–∏—Å—Ç–∫–∞ URL –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            window.addEventListener('pagehide', () => {
                this.cleanupUrls();
            });

            this.logger.info('–°–æ–±—ã—Ç–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ', { operationId });
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π', { error: error.message, operationId });
            throw error;
        } finally {
            this.logger.popOperation();
        }
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
    toggleTheme() {
        const operationId = this.logger.pushOperation('toggleTheme');
        try {
            const currentTheme = document.body.getAttribute('data-theme');
            const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
            
            document.body.setAttribute('data-theme', newTheme);
            localStorage.setItem('theme', newTheme);
            this.updateThemeToggleIcon();
            
            this.logger.trackUserAction('theme_changed', { from: currentTheme, to: newTheme });
            this.logger.info('–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞', { currentTheme, newTheme, operationId });
        } catch (error) {
            this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ç–µ–º—ã', { error: error.message, operationId });
            throw error;
        } finally {
            this.logger.popOperation();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ZIP-—Ñ–∞–π–ª–∞
    async handleZipUpload(event) {
        const operationId = this.logger.pushOperation('handleZipUpload', {
            fileName: event.target.files[0]?.name,
            fileSize: event.target.files[0]?.size
        });
        try {
            const file = event.target.files[0];
            if (!file) {
                this.logger.warn('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω', { operationId });
                return;
            }

            const uploadStatus = document.getElementById('upload-status');
            const globalUploadStatus = document.getElementById('global-upload-status');
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
            if (!file.name.toLowerCase().endsWith('.zip')) {
                this.logger.warn('–í—ã–±—Ä–∞–Ω –Ω–µ ZIP —Ñ–∞–π–ª', { fileName: file.name, operationId });
                this.showError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ ZIP-—Ñ–∞–π–ª');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 100MB)
            if (file.size > 10 * 1024 * 1024) {
                this.logger.warn('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π', { fileSize: file.size, operationId });
                this.showError('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 100MB');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–±–æ–∏—Ö –º–µ—Å—Ç–∞—Ö - –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–π
            if (uploadStatus) {
                uploadStatus.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞...';
                uploadStatus.className = 'upload-status';
            }
            this.updateGlobalStatus('–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ö–∏–≤–∞...', '');

            // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ ArrayBuffer
            const arrayBuffer = await this.readFileAsArrayBuffer(file);
            this.logger.debug('ZIP —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω', { fileSize: file.size, arrayBufferLength: arrayBuffer.byteLength, operationId });
            
            // –ó–∞–≥—Ä—É–∑–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞
            this.zip = await JSZip.loadAsync(arrayBuffer);
            this.logger.debug('ZIP –∞—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω', { filesCount: Object.keys(this.zip.files).length, operationId });
            
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
            await this.renderArchive();
            this.logger.info('–ê—Ä—Ö–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', { operationId });
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∏ –ª–∏ –æ—à–∏–±–∫–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
            const manifestFile = this.zip.file('manifest.txt');
            if (manifestFile) {
                const manifestText = await manifestFile.async('text');
                const { items, errors } = this.parseManifest(manifestText);
                
                if (errors.length > 0) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
                    if (uploadStatus) {
                        uploadStatus.textContent = `–ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ö–∏–≤.`;
                        uploadStatus.className = 'upload-status error';
                    }
                    this.updateGlobalStatus(`–ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞—Ä—Ö–∏–≤.`, 'error');
                } else {
                    // –ï—Å–ª–∏ –æ—à–∏–±–æ–∫ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (uploadStatus) {
                        uploadStatus.textContent = '–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!';
                        uploadStatus.className = 'upload-status success';
                    }
                    this.updateGlobalStatus('–ê—Ä—Ö–∏–≤ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!', 'success');
                }
            }

            // –ü–æ–∫–∞–∑–∞—Ç—å —Å–µ–∫—Ü–∏—é –∞—Ä—Ö–∏–≤–∞
            const archiveSection = document.getElementById('archive-section');
            if (archiveSection) {
                archiveSection.hidden = false;
                this.logger.debug('–°–µ–∫—Ü–∏—è –∞—Ä—Ö–∏–≤–∞ –ø–æ–∫–∞–∑–∞–Ω–∞', { operationId });
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å –∞—Ä—Ö–∏–≤–∞
            const archiveSidebar = document.getElementById('archive-sidebar');
            if (archiveSidebar) {
                archiveSidebar.hidden = false;
                this.logger.debug('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∞—Ä—Ö–∏–≤–∞ –ø–æ–∫–∞–∑–∞–Ω–∞', { operationId });
            }

            // –°–≤–µ—Ä–Ω—É—Ç—å —Å–µ–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            const uploadSectionDetails = document.getElementById('upload-section-details');
            if (uploadSectionDetails) {
                uploadSectionDetails.removeAttribute('open');
            }

        } catch (error) {
            this.logger.logError(error, { operationId });
            this.showError(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ZIP-—Ñ–∞–π–ª–∞: ${error.message}`);
        } finally {
            this.logger.popOperation();
        }
    }

    // –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–∞–∫ ArrayBuffer —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    readFileAsArrayBuffer(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.onload = () => resolve(reader.result);
            reader.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞'));
            reader.readAsArrayBuffer(file);
        });
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    async renderArchive() {
        const operationId = this.logger.pushOperation('renderArchive');
        try {
            const container = document.getElementById('archive-container');
            if (!container) {
                this.logger.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', { operationId });
                return;
            }

            this.logger.debug('–ù–∞—á–∞–ª–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Ä—Ö–∏–≤–∞', { operationId });

            // –ß—Ç–µ–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
            const manifestFile = this.zip.file('manifest.txt');
            if (!manifestFile) {
                const error = new Error('–§–∞–π–ª manifest.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ');
                this.logger.error('–ú–∞–Ω–∏—Ñ–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', { error: error.message, operationId });
                throw error;
            }

            const manifestText = await manifestFile.async('text');
            this.logger.debug('–ú–∞–Ω–∏—Ñ–µ—Å—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω', { manifestLength: manifestText.length, operationId });

            const { items, errors } = this.parseManifest(manifestText);
            this.logger.info('–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Ä–∞–∑–æ–±—Ä–∞–Ω', { itemsCount: items.length, errorsCount: errors.length, operationId });
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ö –≤–º–µ—Å—Ç–æ –∞—Ä—Ö–∏–≤–∞
            if (errors.length > 0) {
                this.displayManifestErrors(errors);
                return;
            }
            
            container.innerHTML = '';
            this.logger.debug('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—á–∏—â–µ–Ω', { operationId });
            
            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            for (let i = 0; i < items.length; i++) {
                const item = items[i];
                await this.renderArchiveItem(item, container);
                this.logger.debug('–≠–ª–µ–º–µ–Ω—Ç –∞—Ä—Ö–∏–≤–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω', { index: i, filename: item.filename, operationId });
            }

            // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞—Ä—Ö–∏–≤–µ
            this.populateSidebar(items);
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞
            this.validateArchive(items);
            
            this.logger.info('–ê—Ä—Ö–∏–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ', { itemsCount: items.length, operationId });

        } catch (error) {
            this.logger.logError(error, { operationId });
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞: ${error.message}`);
        } finally {
            this.logger.popOperation();
        }
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
    displayManifestErrors(errors) {
        const operationId = this.logger.pushOperation('displayManifestErrors', { errorsCount: errors.length });
        try {
            const container = document.getElementById('archive-container');
            if (!container) {
                this.logger.warn('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∞—Ä—Ö–∏–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', { operationId });
                return;
            }

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
            container.innerHTML = `
                <div class="manifest-errors-container">
                    <h2 class="error-title">‚ùå –û—à–∏–±–∫–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ –∞—Ä—Ö–∏–≤–∞</h2>
                    <p class="error-description">–ù–∞–π–¥–µ–Ω–æ ${errors.length} –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª–µ manifest.txt. –ê—Ä—Ö–∏–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç—Ç–∏—Ö –æ—à–∏–±–æ–∫.</p>
                    
                    <div class="errors-list">
                        ${errors.map((error, index) => `
                            <div class="error-item" data-error-index="${index}">
                                <div class="error-header">
                                    <span class="error-line-number">–°—Ç—Ä–æ–∫–∞ ${error.lineNumber}</span>
                                    <span class="error-toggle" onclick="this.parentElement.parentElement.querySelector('.error-details').classList.toggle('expanded')">‚ñº</span>
                                </div>
                                <div class="error-content">
                                    <div class="error-line">${this.escapeHtml(error.line)}</div>
                                    <div class="error-message">${this.escapeHtml(error.error)}</div>
                                    <div class="error-details">
                                        <div class="error-format">
                                            <strong>–û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:</strong> ${this.escapeHtml(error.expectedFormat)}
                                        </div>
                                        ${error.problematicParts ? `
                                        <div class="error-parts">
                                            <strong>–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏:</strong>
                                            <ul>
                                                ${error.problematicParts.map(part => `
                                                    <li class="error-part ${part.isEmpty ? 'empty' : ''} ${part.isProblematic ? 'problematic' : ''}"
                                                        data-part-index="${part.index}">
                                                        <span class="part-field">[${part.field}]</span>
                                                        <span class="part-content">${this.escapeHtml(part.part)}</span>
                                                        <span class="part-status">${part.isEmpty ? ' (–ø—É—Å—Ç–æ–µ)' : part.isProblematic ? ' (–æ—à–∏–±–∫–∞)' : ''}</span>
                                                    </li>
                                                `).join('')}
                                            </ul>
                                        </div>
                                        ` : ''}
                                    </div>
                                </div>
                            </div>
                        `).join('')}
                    </div>
                </div>
            `;

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞—Ä—Ö–∏–≤–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ —Å–∫—Ä—ã—Ç–∞)
            const archiveSection = document.getElementById('archive-section');
            if (archiveSection) {
                archiveSection.hidden = false;
            }

            this.logger.info('–û—à–∏–±–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω—ã', { errorsCount: errors.length, operationId });
        } catch (error) {
            this.logger.logError(error, { operationId });
        } finally {
            this.logger.popOperation();
        }
    }

    // –ü–∞—Ä—Å–µ—Ä –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ —Å–±–æ—Ä–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–∞—Ö
    parseManifest(text) {
        const operationId = this.logger.pushOperation('parseManifest', { textLength: text.length });
        try {
            const items = [];
            const errors = [];
            const lines = text.split('\n');
            let validItemsCount = 0;
            let invalidItemsCount = 0;
            
            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                const lineNumber = i + 1;
                
                if (line.startsWith('#') || line === '') continue;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                const separatorCount = (line.match(/\|/g) || []).length;
                const parts = line.split('|').map(part => part.trim());
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤)
                const hasProperSpacing = line.includes('| ') && line.includes(' |');
                if (separatorCount > 0 && !hasProperSpacing && parts.length > 1) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                    const correctedLine = line.replace(/\|/g, ' | ');
                    const correctedParts = correctedLine.split('|').map(part => part.trim());
                    if (correctedParts.length !== parts.length) {
                        // –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
                        errors.push({
                            lineNumber: lineNumber,
                            line: line,
                            error: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: "–ø–æ–ª–µ1 | –ø–æ–ª–µ2 | –ø–æ–ª–µ3" (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏)',
                            expectedFormat: 'filename | type | title | description | date | tags (—Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –≤–æ–∫—Ä—É–≥ |)',
                            problematicParts: this.getProblematicParts(parts, null, line, true)
                        });
                        invalidItemsCount++;
                        continue;
                    }
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π
                if (parts.length >= 4) {
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                    const isPdf = parts[0].toLowerCase().endsWith('.pdf');
                    
                    let item;
                    let hasValidFormat = false;
                    let formatError = null;
                    
                    if (isPdf) {
                        // –î–ª—è PDF —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
                        if (parts.length === 4) {
                            // –§–æ—Ä–º–∞—Ç: –∏–º—è —Ñ–∞–π–ª–∞ | —Ç–∏–ø | –¥–∞—Ç–∞ | —Ç–µ–≥–∏
                            const date = this.sanitizeString(parts[2]);
                            const tags = parts[3].split(',').map(tag => this.sanitizeString(tag.trim()));
                            
                            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–≥–ª—è–¥–∏—Ç –ª–∏ –≤—Ç–æ—Ä–æ–µ –ø–æ–ª–µ –∫–∞–∫ –¥–∞—Ç–∞
                            const isDateValid = this.isValidDate(date);
                            
                            if (this.sanitizeFilename(parts[0]) && this.sanitizeString(parts[1]) && isDateValid) {
                                item = {
                                    filename: this.sanitizeFilename(parts[0]),
                                    type: this.sanitizeString(parts[1]),
                                    title: '', // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–∑ PDF –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                                    description: '', // –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω –∏–∑ PDF –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                                    date: date,
                                    tags: tags
                                };
                                hasValidFormat = true;
                            } else {
                                formatError = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è PDF —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: –∏–º—è_—Ñ–∞–π–ª–∞ | —Ç–∏–ø | –¥–∞—Ç–∞ | —Ç–µ–≥–∏';
                            }
                        } else if (parts.length >= 6) {
                            // –§–æ—Ä–º–∞—Ç: –∏–º—è —Ñ–∞–π–ª–∞ | —Ç–∏–ø | –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –æ–ø–∏—Å–∞–Ω–∏–µ | –¥–∞—Ç–∞ | —Ç–µ–≥–∏
                            const date = this.sanitizeString(parts[4]);
                            const isDateValid = this.isValidDate(date);
                            
                            if (this.sanitizeFilename(parts[0]) && this.sanitizeString(parts[1]) && isDateValid) {
                                item = {
                                    filename: this.sanitizeFilename(parts[0]),
                                    type: this.sanitizeString(parts[1]),
                                    title: this.sanitizeString(parts[2]),
                                    description: this.sanitizeString(parts[3]),
                                    date: date,
                                    tags: parts[5].split(',').map(tag => this.sanitizeString(tag.trim()))
                                };
                                hasValidFormat = true;
                            } else {
                                formatError = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è PDF —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: –∏–º—è_—Ñ–∞–π–ª–∞ | —Ç–∏–ø | –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –æ–ø–∏—Å–∞–Ω–∏–µ | –¥–∞—Ç–∞ | —Ç–µ–≥–∏';
                            }
                        } else {
                            formatError = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è PDF —Ñ–∞–π–ª–∞. –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: 4 –∏–ª–∏ 6+';
                        }
                    } else {
                        // –î–ª—è –Ω–µ-PDF —Ñ–∞–π–ª–æ–≤ –æ–∂–∏–¥–∞–µ–º 6+ –ø–æ–ª–µ–π
                        if (parts.length >= 6) {
                            const date = this.sanitizeString(parts[4]);
                            const isDateValid = this.isValidDate(date);
                            
                            if (this.sanitizeFilename(parts[0]) && this.sanitizeString(parts[1]) && this.sanitizeString(parts[2]) && this.sanitizeString(parts[3]) && isDateValid) {
                                item = {
                                    filename: this.sanitizeFilename(parts[0]),
                                    type: this.sanitizeString(parts[1]),
                                    title: this.sanitizeString(parts[2]),
                                    description: this.sanitizeString(parts[3]),
                                    date: date,
                                    tags: parts[5].split(',').map(tag => this.sanitizeString(tag.trim()))
                                };
                                hasValidFormat = true;
                            } else {
                                formatError = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏. –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: –∏–º—è_—Ñ–∞–π–ª–∞ | —Ç–∏–ø | –∑–∞–≥–æ–ª–æ–≤–æ–∫ | –æ–ø–∏—Å–∞–Ω–∏–µ | –¥–∞—Ç–∞ | —Ç–µ–≥–∏';
                            }
                        } else {
                            formatError = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏. –û–∂–∏–¥–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π: 6+';
                        }
                    }

                    if (hasValidFormat && item) {
                        items.push(item);
                        validItemsCount++;
                    } else if (formatError) {
                        errors.push({
                            lineNumber: lineNumber,
                            line: line,
                            error: formatError,
                            expectedFormat: isPdf ? '01_–ù–æ–≤–æ—Å—Ç—å.pdf | –ù–û–í–û–°–¢–¨ | –¥–∞—Ç–∞ | —Ç–µ–≥–∏' : '02_–ú–µ–¥–∏–∞.mp3 | –ú–ï–î–ò–ê | –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ | 2024-10-15 | —Ç–µ–≥1,—Ç–µ–≥2,—Ç–µ–≥3',
                            problematicParts: this.getProblematicParts(parts, item, line, false)
                        });
                        invalidItemsCount++;
                    }
                } else {
                    errors.push({
                        lineNumber: lineNumber,
                        line: line,
                        error: `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–µ–π. –ù–∞–π–¥–µ–Ω–æ: ${parts.length}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: –º–∏–Ω–∏–º—É–º 4 –¥–ª—è PDF –∏–ª–∏ 6 –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤`,
                        expectedFormat: '01_–ù–æ–≤–æ—Å—Ç—å.pdf | –ù–û–í–û–°–¢–¨ | 2024-10-20 | —Ç–µ–≥1,—Ç–µ–≥2,—Ç–µ–≥3 (–¥–ª—è PDF) –∏–ª–∏ 02_–ú–µ–¥–∏–∞.mp3 | –ú–ï–î–ò–ê | –ó–∞–≥–æ–ª–æ–≤–æ–∫ | –û–ø–∏—Å–∞–Ω–∏–µ | 2024-10-15 | —Ç–µ–≥1,—Ç–µ–≥2,—Ç–µ–≥3 (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–æ–≤)',
                        problematicParts: this.getProblematicParts(parts, null, line, false)
                    });
                    invalidItemsCount++;
                }
            }

            this.logger.info('–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Ä–∞–∑–æ–±—Ä–∞–Ω', { 
                validItems: validItemsCount, 
                invalidItems: invalidItemsCount, 
                totalLines: lines.length,
                errorsCount: errors.length,
                operationId 
            });

            return { items, errors };
        } catch (error) {
            this.logger.logError(error, { operationId });
            throw error;
        } finally {
            this.logger.popOperation();
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    isValidDate(dateString) {
        if (!dateString) return false;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        const dateRegexes = [
            /^\d{4}-\d{2}-\d{2}$/, // YYYY-MM-DD
            /^\d{4}\/\d{2}\/\d{2}$/, // YYYY/MM/DD
            /^\d{2}\.\d{2}\.\d{4}$/, // DD.MM.YYYY
            /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}$/, // YYYY-MM-DD HH:MM:SS
            /^D:\d{14}$/ // PDF —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã D:YYYYMMDDHHMMSS
        ];
        
        return dateRegexes.some(regex => regex.test(dateString));
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å—Ç—Ä–æ–∫–∏
    getProblematicParts(parts, item, originalLine, isSeparatorError = false) {
        const problematic = [];
        const isPdf = parts[0].toLowerCase().endsWith('.pdf');
        const expectedFormat = isPdf ? 4 : 6; // PDF: 4 –ø–æ–ª—è, –¥—Ä—É–≥–∏–µ: 6+ –ø–æ–ª–µ–π
        
        if (isSeparatorError) {
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è—Ö, –ø–æ–º–µ—á–∞–µ–º –≤—Å—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—É—é
            for (let i = 0; i < parts.length; i++) {
                problematic.push({
                    index: i,
                    part: parts[i],
                    field: i === 0 ? 'filename' : i === 1 ? 'type' : i === 2 ? (isPdf ? 'date' : 'title') : i === 3 ? (isPdf ? 'tags' : 'description') : i === 4 ? 'date' : 'tags',
                    isEmpty: parts[i] === '',
                    isProblematic: true,
                    expected: i < expectedFormat
                });
            }
            return problematic;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –≤ —Å—Ç—Ä–æ–∫–µ
        for (let i = 0; i < parts.length; i++) {
            const part = parts[i];
            let field = '';
            let isProblematic = false;
            let isEmpty = part === '';
            let isDateField = false;
            
            if (isPdf) {
                // –î–ª—è PDF —Ñ–∞–π–ª–æ–≤
                if (i === 0) {
                    field = 'filename';
                    isProblematic = !item || !item.filename;
                } else if (i === 1) {
                    field = 'type';
                    isProblematic = !item || !item.type;
                } else if (i === 2) {
                    field = 'date';
                    isDateField = true;
                    isProblematic = !item || !item.date || !this.isValidDate(part);
                } else if (i === 3) {
                    field = 'tags';
                    isProblematic = false; // —Ç–µ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
                } else {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è PDF
                    field = i === 4 ? 'title' : i === 5 ? 'description' : 'extra';
                    isProblematic = true; // –µ—Å–ª–∏ –±–æ–ª—å—à–µ 4 –ø–æ–ª–µ–π –¥–ª—è PDF - —ç—Ç–æ –æ—à–∏–±–∫–∞
                }
            } else {
                // –î–ª—è –Ω–µ-PDF —Ñ–∞–π–ª–æ–≤
                if (i === 0) {
                    field = 'filename';
                    isProblematic = !item || !item.filename;
                } else if (i === 1) {
                    field = 'type';
                    isProblematic = !item || !item.type;
                } else if (i === 2) {
                    field = 'title';
                    isProblematic = !item || !item.title;
                } else if (i === 3) {
                    field = 'description';
                    isProblematic = !item || !item.description;
                } else if (i === 4) {
                    field = 'date';
                    isDateField = true;
                    isProblematic = !item || !item.date || !this.isValidDate(part);
                } else if (i === 5) {
                    field = 'tags';
                    isProblematic = false; // —Ç–µ–≥–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
                } else {
                    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –Ω–µ-PDF - –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞
                    field = 'extra_tags';
                    isProblematic = false;
                }
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –ø–æ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            if (isDateField && part && !this.isValidDate(part)) {
                isProblematic = true;
            }
            
            problematic.push({
                index: i,
                part: part,
                field: field,
                isEmpty: isEmpty,
                isProblematic: isProblematic,
                expected: i < expectedFormat
            });
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª–µ–π –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª—è—Ö
        if (parts.length < expectedFormat) {
            for (let i = parts.length; i < expectedFormat; i++) {
                let field = '';
                if (isPdf) {
                    if (i === 0) field = 'filename';
                    else if (i === 1) field = 'type';
                    else if (i === 2) field = 'date';
                    else if (i === 3) field = 'tags';
                } else {
                    if (i === 0) field = 'filename';
                    else if (i === 1) field = 'type';
                    else if (i === 2) field = 'title';
                    else if (i === 3) field = 'description';
                    else if (i === 4) field = 'date';
                    else if (i === 5) field = 'tags';
                }
                
                problematic.push({
                    index: i,
                    part: '',
                    field: field,
                    isEmpty: true,
                    isProblematic: true,
                    expected: true,
                    missing: true
                });
            }
        }
        
        return problematic;
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è XSS
    sanitizeString(str) {
        if (typeof str !== 'string') return '';
        
        const div = document.createElement('div');
        div.textContent = str;
        return div.innerHTML;
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ - –ù–ï –∏–∑–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    sanitizeFilename(filename) {
        if (typeof filename !== 'string') return '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—É—Ç–∏
        if (filename.includes('../') || filename.includes('..\\')) {
            this.logger.warn('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞', { filename });
            return '';
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
        return filename.replace(/[\r\n]/g, '');
    }


    // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
    getItemEmoji(type) {
        const typeMap = {
            '–ù–û–í–û–°–¢–¨': 'üì∞',
            '–ú–ï–î–ò–ê': 'üé¨',
            '–ú–ï–ú': 'üòÇ',
            '–§–û–¢–û': 'üì∏',
            '–í–ò–î–ï–û': 'üé•',
            '–ê–£–î–ò–û': 'üéµ',
            '–î–û–ö–£–ú–ï–ù–¢': 'üìÑ',
            '–¢–ï–ö–°–¢': 'üìù',
            '–ö–ê–†–¢–ò–ù–ö–ê': 'üñºÔ∏è',
            '–°–°–´–õ–ö–ê': 'üîó',
            '–°–û–ë–´–¢–ò–ï': 'üìÖ',
            '–õ–ò–ß–ù–û–ï': 'üë§',
            '–û–ë–£–ß–ï–ù–ò–ï': 'üìö',
            '–†–ê–ë–û–¢–ê': 'üíº',
            '–•–û–ë–ë–ò': 'üé®'
        };
        return typeMap[type.toUpperCase()] || 'üìÅ';
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∞—Ä—Ö–∏–≤–∞
    async renderArchiveItem(item, container) {
        const itemDiv = document.createElement('div');
        itemDiv.className = 'archive-item';
        
        // –°–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ HTML, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è ID –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const previewId = `preview-${this.generateSafeId(item.filename)}`;
        const explanationPreviewId = `explanation-${this.generateSafeId(item.filename)}`;
        
        const emoji = this.getItemEmoji(item.type);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–µ–º–æ–º –∏ –∏—â–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
        const isMem = item.type.toUpperCase() === '–ú–ï–ú';
        let explanationFile = null;
        if (isMem) {
            explanationFile = this.findExplanationFile(item.filename);
        }
        
        // –î–ª—è PDF —Ñ–∞–π–ª–æ–≤ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
        if (item.filename.toLowerCase().endsWith('.pdf')) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF —Ñ–∞–π–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const pdfFile = this.zip.file(item.filename);
            if (pdfFile) {
                try {
                    const arrayBuffer = await pdfFile.async('arraybuffer');
                    const pdfDocument = await pdfjsLib.getDocument(arrayBuffer).promise;
                    const metadata = await pdfDocument.getMetadata();
                    
                    let displayTitle = item.title; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
                    let displayDescription = item.description; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
                    
                    if (metadata && metadata.info) {
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ PDF –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
                        if (metadata.info.Title) {
                            displayTitle = metadata.info.Title;
                        }
                        
                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º—É –∏–∑ PDF –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
                        if (metadata.info.Subject) {
                            displayDescription = metadata.info.Subject;
                        } else if (metadata.info.Title) {
                            // –ï—Å–ª–∏ —Ç–µ–º—ã –Ω–µ—Ç, –Ω–æ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
                            displayDescription = metadata.info.Title;
                        }
                    }
                    
                    let explanationHtml = '';
                    if (isMem && explanationFile) {
                        explanationHtml = `
                            <details class="content-details explanation-details" style="margin-top: 15px;">
                                <summary aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–º–∞ ${this.escapeHtml(displayTitle)}">
                                    üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–º–∞
                                </summary>
                                <div class="content-preview" id="${explanationPreviewId}" style="margin-top: 10px;">
                                    <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è...</div>
                                </div>
                            </details>
                        `;
                    }
                    
                    itemDiv.innerHTML = `
                        <div class="item-header">
                            <div class="item-meta">
                                <div class="item-emoji">${emoji}</div>
                                <div class="item-type">${this.escapeHtml(item.type)}</div>
                                <div class="item-date">${this.escapeHtml(item.date)}</div>
                            </div>
                            <h3 class="item-title">${this.escapeHtml(displayTitle)} ${item.tags.map(tag => `<span class="title-tags">${this.escapeHtml(tag)}</span>`).join(' ')}</h3>
                        </div>
                        <div class="item-description">${this.escapeHtml(displayDescription)}</div>
                        <div class="content-preview" id="${previewId}" style="margin-top: 10px;">
                            <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</div>
                        </div>
                        ${explanationHtml}
                    `;
                } catch (error) {
                    // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
                    this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞', { error: error.message, filename: item.filename });
                    
                    let explanationHtml = '';
                    if (isMem && explanationFile) {
                        explanationHtml = `
                            <details class="content-details explanation-details" style="margin-top: 15px;">
                                <summary aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–º–∞ ${this.escapeHtml(item.title)}">
                                    üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–º–∞
                                </summary>
                                <div class="content-preview" id="${explanationPreviewId}" style="margin-top: 10px;">
                                    <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è...</div>
                                </div>
                            </details>
                        `;
                    }
                    
                    itemDiv.innerHTML = `
                        <div class="item-header">
                            <div class="item-meta">
                                <div class="item-emoji">${emoji}</div>
                                <div class="item-type">${this.escapeHtml(item.type)}</div>
                                <div class="item-date">${this.escapeHtml(item.date)}</div>
                            </div>
                            <h3 class="item-title">${this.escapeHtml(item.title)} ${item.tags.map(tag => `<span class="title-tags">${this.escapeHtml(tag)}</span>`).join(' ')}</h3>
                        </div>
                        <div class="item-description">${this.escapeHtml(item.description)}</div>
                        <div class="content-preview" id="${previewId}" style="margin-top: 10px;">
                            <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</div>
                        </div>
                        ${explanationHtml}
                    `;
                }
            } else {
                // –ï—Å–ª–∏ PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                let explanationHtml = '';
                if (isMem && explanationFile) {
                    explanationHtml = `
                        <details class="content-details explanation-details" style="margin-top: 15px;">
                            <summary aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–º–∞ ${this.escapeHtml(item.title)}">
                                üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–º–∞
                            </summary>
                            <div class="content-preview" id="${explanationPreviewId}" style="margin-top: 10px;">
                                <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è...</div>
                            </div>
                        </details>
                    `;
                }
                
                itemDiv.innerHTML = `
                    <div class="item-header">
                        <div class="item-meta">
                            <div class="item-emoji">${emoji}</div>
                            <div class="item-type">${this.escapeHtml(item.type)}</div>
                            <div class="item-date">${this.escapeHtml(item.date)}</div>
                        </div>
                        <h3 class="item-title">${this.escapeHtml(item.title)} ${item.tags.map(tag => `<span class="title-tags">${this.escapeHtml(tag)}</span>`).join(' ')}</h3>
                    </div>
                    <div class="item-description">${this.escapeHtml(item.description)}</div>
                    <div class="content-preview" id="${previewId}" style="margin-top: 10px;">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</div>
                    </div>
                    ${explanationHtml}
                `;
            }
        } else {
            // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—â–∏–π —Å–ø–æ–π–ª–µ—Ä
            let explanationHtml = '';
            if (isMem && explanationFile) {
                explanationHtml = `
                    <details class="content-details explanation-details" style="margin-top: 15px;">
                        <summary aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–º–∞ ${this.escapeHtml(item.title)}">
                            üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –º–µ–º–∞
                        </summary>
                        <div class="content-preview" id="${explanationPreviewId}" style="margin-top: 10px;">
                            <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è...</div>
                        </div>
                    </details>
                `;
            }
            
            itemDiv.innerHTML = `
                <div class="item-header">
                    <div class="item-meta">
                        <div class="item-emoji">${emoji}</div>
                        <div class="item-type">${this.escapeHtml(item.type)}</div>
                        <div class="item-date">${this.escapeHtml(item.date)}</div>
                    </div>
                    <h3 class="item-title">${this.escapeHtml(item.title)} ${item.tags.map(tag => `<span class="title-tags">${this.escapeHtml(tag)}</span>`).join(' ')}</h3>
                </div>
                <div class="item-description">${this.escapeHtml(item.description)}</div>
                <details class="content-details">
                    <summary aria-label="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ ${this.escapeHtml(item.title)}">
                        üëÅ –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                    </summary>
                    <div class="content-preview" id="${previewId}" 
                         style="margin-top: 10px;">
                        <div class="loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</div>
                    </div>
                </details>
                ${explanationHtml}
            `;
        }
        
        container.appendChild(itemDiv);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await this.loadContent(item);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –º–µ–º —Å —Ñ–∞–π–ª–æ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        if (isMem && explanationFile) {
            await this.loadExplanationContent(explanationFile, explanationPreviewId);
        }
    }

    // –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –º–µ–º–∞
    findExplanationFile(memFilename) {
        const operationId = this.logger.pushOperation('findExplanationFile', { memFilename });
        try {
            const baseName = memFilename.replace(/\.[^/.]+$/, ""); // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
            this.logger.debug('–ë–∞–∑–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è', { baseName, memFilename, operationId });
            
            // –î–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏–º–µ–Ω: {–Ω–æ–º–µ—Ä}_{—Ç–∏–ø}.{—Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ} -> {–Ω–æ–º–µ—Ä}_{—Ç–∏–ø}_–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.txt
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            const exactMatchNames = [
                `${baseName}_–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.txt`,
                `${baseName}_explanation.txt`,
                `${baseName}_info.txt`,
                `${baseName}_description.txt`,
                `${baseName}_details.txt`
            ];
            
            this.logger.debug('–ü–æ–∏—Å–∫ –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é', { exactMatchNames, operationId });
            
            for (const explanationName of exactMatchNames) {
                this.logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è', { explanationName, exists: !!this.zip.file(explanationName), operationId });
                if (this.zip.file(explanationName)) {
                    this.logger.info('–§–∞–π–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é', { explanationName, operationId });
                    return this.zip.file(explanationName);
                }
            }
            
            // –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
            // –†–∞–∑–±–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–º—è –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∏—â–µ–º —Ñ–∞–π–ª—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —ç—Ç–∏—Ö —á–∞—Å—Ç–µ–π
            const nameParts = baseName.split('_');
            this.logger.debug('–ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é', { nameParts, operationId });
            
            // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —á–∞—Å—Ç–µ–π –∏–º–µ–Ω–∏ (–Ω–∞—á–∏–Ω–∞—è —Å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–Ω–æ–π)
            for (let i = nameParts.length; i > 0; i--) {
                const partialName = nameParts.slice(0, i).join('_');
                this.logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è', { partialName, operationId });
                
                const partialMatchNames = [
                    `${partialName}_–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.txt`,
                    `${partialName}_explanation.txt`,
                    `${partialName}_info.txt`,
                    `${partialName}_description.txt`,
                    `${partialName}_details.txt`
                ];
                
                for (const explanationName of partialMatchNames) {
                    this.logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ–∞–π–ª–∞', { explanationName, exists: !!this.zip.file(explanationName), operationId });
                    if (this.zip.file(explanationName)) {
                        this.logger.info('–§–∞–π–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é', { explanationName, partialName, operationId });
                        return this.zip.file(explanationName);
                    }
                }
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∏—â–µ–º —Ñ–∞–π–ª—ã –æ–±—ä—è—Å–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –º–µ–º–∞
            const allFiles = Object.keys(this.zip.files);
            const explanationFiles = allFiles.filter(f => f.includes('_–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ.txt') || f.includes('_explanation.txt') || 
                f.includes('_info.txt') || f.includes('_description.txt') || f.includes('_details.txt'));
            
            this.logger.debug('–ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π', { explanationFiles, operationId });
            
            for (const explanationFile of explanationFiles) {
                const explanationBase = explanationFile.replace(/\.[^/.]+$/, ""); // –£–¥–∞–ª—è–µ–º .txt
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –±–∞–∑–æ–≤–æ–µ –∏–º—è –º–µ–º–∞ —á–∞—Å—Ç—å—é –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç
                if (explanationBase.includes(baseName) || baseName.includes(explanationBase.replace(/_(–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ|explanation|info|description|details)$/, ''))) {
                    this.logger.info('–§–∞–π–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é', { explanationFile, baseName, explanationBase, operationId });
                    return this.zip.file(explanationFile);
                }
            }
            
            this.logger.warn('–§–∞–π–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω', { baseName, operationId });
            return null;
        } catch (error) {
            this.logger.logError(error, { operationId });
            return null;
        } finally {
            this.logger.popOperation();
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    async loadExplanationContent(explanationFile, previewId) {
        const operationId = this.logger.pushOperation('loadExplanationContent');
        try {
            const previewDiv = document.getElementById(previewId);
            if (!previewDiv) {
                this.logger.warn('–≠–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω', { previewId, operationId });
                return;
            }

            this.logger.debug('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è', { operationId });

            const text = await explanationFile.async('text');
            previewDiv.innerHTML = `<pre class="text-content explanation-text">${this.escapeHtml(text)}</pre>`;
            this.logger.debug('–§–∞–π–ª –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω', { textLength: text.length, operationId });
        } catch (error) {
            this.logger.logError(error, { operationId });
            previewDiv.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è: ${this.escapeHtml(error.message)}</p>`;
        } finally {
            this.logger.popOperation();
        }
    }

    // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    escapeHtml(text) {
        if (typeof text !== 'string') return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞
    async loadContent(item) {
        const operationId = this.logger.pushOperation('loadContent', { filename: item.filename });
        try {
            const previewId = `preview-${this.generateSafeId(item.filename)}`;
            const previewDiv = document.getElementById(previewId);
            if (!previewDiv) {
                this.logger.warn('–≠–ª–µ–º–µ–Ω—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω', { previewId, operationId });
                return;
            }

            this.logger.debug('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ñ–∞–π–ª–∞', { filename: item.filename, operationId });
            
            const file = this.zip.file(item.filename);
            if (!file) {
                this.logger.warn('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ', { filename: item.filename, operationId });
                previewDiv.innerHTML = '<p class="error">–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ</p>';
                return;
            }
            
            this.logger.debug('–§–∞–π–ª –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É', { filename: item.filename, operationId });

            const fileExt = item.filename.split('.').pop().toLowerCase();
            this.logger.debug('–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', { fileExt, operationId });
            
            switch (fileExt) {
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'gif':
                case 'svg':
                    await this.handleImageFile(file, item, previewDiv, operationId);
                    break;
                    
                case 'mp4':
                case 'webm':
                case 'avi':
                case 'mov':
                case 'wmv':
                case 'flv':
                    await this.handleVideoFile(file, item, previewDiv, operationId);
                    break;
                    
                case 'mp3':
                case 'wav':
                case 'ogg':
                    await this.handleAudioFile(file, item, previewDiv, operationId);
                    break;
                    
                case 'pdf':
                    await this.handlePdfFile(file, item, previewDiv, operationId);
                    break;
                    
                case 'csv':
                    await this.handleCsvFile(file, item, previewDiv, operationId);
                    break;
                    
                case 'txt':
                    await this.handleTextFile(file, item, previewDiv, operationId);
                    break;
                    
                default:
                    await this.handleDefaultFile(file, item, previewDiv, operationId);
            }
        } catch (error) {
            this.logger.logError(error, { operationId });
            previewDiv.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${this.escapeHtml(error.message)}</p>`;
        } finally {
            this.logger.popOperation();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    async handleImageFile(file, item, previewDiv, parentOperationId = null) {
        const operationId = this.logger.pushOperation('handleImageFile', { filename: item.filename, parentOperationId });
        try {
            const imageData = await file.async('base64');
            const imageUrl = `data:image/${item.filename.split('.').pop()};base64,${imageData}`;
            previewDiv.innerHTML = `<img src="${this.escapeHtml(imageUrl)}" alt="${this.escapeHtml(item.title)}" loading="lazy">`;
            this.logger.debug('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ', { filename: item.filename, operationId });
        } catch (e) {
            this.logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥', { error: e.message, operationId });
            try {
                // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                const imageBlob = await file.async('blob');
                const imageUrl = URL.createObjectURL(imageBlob);
                previewDiv.innerHTML = `<img src="${this.escapeHtml(imageUrl)}" alt="${this.escapeHtml(item.title)}" loading="lazy">`;
                this.imageUrls.push(imageUrl);
                this.logger.debug('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ blob', { filename: item.filename, operationId });
            } catch (blobError) {
                this.logger.logError(blobError, { operationId });
                previewDiv.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${this.escapeHtml(blobError.message)}</p>`;
            }
        } finally {
            this.logger.popOperation();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
    async handleVideoFile(file, item, previewDiv, parentOperationId = null) {
        const operationId = this.logger.pushOperation('handleVideoFile', { filename: item.filename, parentOperationId });
        try {
            const videoBlob = await file.async('blob');
            const videoUrl = URL.createObjectURL(videoBlob);
            
            let videoMimeType = 'video/' + item.filename.split('.').pop().toLowerCase();
            const mimeTypes = {
                'mp4': 'video/mp4',
                'avi': 'video/x-msvideo',
                'mov': 'video/quicktime',
                'wmv': 'video/x-ms-wmv',
                'flv': 'video/x-flv',
                'webm': 'video/webm'
            };
            
            videoMimeType = mimeTypes[videoMimeType.split('/')[1]] || videoMimeType;
            
            previewDiv.innerHTML = `
                <video controls preload="metadata" style="width: 100%; max-width: 800px; height: auto; margin: 10px 0; display: block;">
                    <source src="${this.escapeHtml(videoUrl)}" type="${this.escapeHtml(videoMimeType)}">
                    –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ.
                </video>
            `;
            
            this.videoUrls.push(videoUrl);
            this.logger.debug('–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ', { filename: item.filename, operationId });
        } catch (e) {
            this.logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ', { error: e.message, operationId });
            previewDiv.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ: ${this.escapeHtml(e.message)}</p>`;
        } finally {
            this.logger.popOperation();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
    async handleAudioFile(file, item, previewDiv, parentOperationId = null) {
        const operationId = this.logger.pushOperation('handleAudioFile', { filename: item.filename, parentOperationId });
        try {
            const audioBlob = await file.async('blob');
            const audioUrl = URL.createObjectURL(audioBlob);
            
            let fileExt = item.filename.split('.').pop().toLowerCase();
            const mimeTypes = {
                'mp3': 'audio/mpeg',
                'wav': 'audio/wav',
                'ogg': 'audio/ogg',
                'm4a': 'audio/mp4',
                'aac': 'audio/aac',
                'flac': 'audio/flac'
            };
            
            let audioMimeType = mimeTypes[fileExt] || 'audio/' + fileExt;
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º video —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –ª—É—á—à–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            previewDiv.innerHTML = `
                <video controls preload="metadata" style="width: 100%; max-width: 800px; height: auto; margin: 10px 0; display: block;">
                    <source src="${this.escapeHtml(audioUrl)}" type="${this.escapeHtml(audioMimeType)}">
                    –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ.
                </video>
            `;
            
            this.audioUrls.push(audioUrl);
            this.logger.debug('–ê—É–¥–∏–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ', { filename: item.filename, operationId });
        } catch (e) {
            this.logger.logError(e, { operationId });
            previewDiv.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∞—É–¥–∏–æ: ${this.escapeHtml(e.message)}</p>`;
        } finally {
            this.logger.popOperation();
        }
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ PDF
    parsePdfDate(dateString) {
        if (!dateString || typeof dateString !== 'string') {
            return null;
        }

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "D:" –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        const cleanDate = dateString.replace(/^D:/, '');
        
        // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–æ—Ä–º–∞—Ç–∞ PDF –¥–∞—Ç—ã
        // –§–æ—Ä–º–∞—Ç: D:YYYYMMDDHHMMSSOHH'MM' –≥–¥–µ O - + –∏–ª–∏ -
        const dateRegex = /^(\d{4})(\d{2})(\d{2})(\d{2})(\d{2})(\d{2})([+-])(\d{2})'(\d{2})'$/;
        const match = cleanDate.match(dateRegex);
        
        if (match) {
            const [, year, month, day, hour, minute, second, tzSign, tzHour, tzMinute] = match;
            
            // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ UTC
            let date = new Date(Date.UTC(
                parseInt(year),
                parseInt(month) - 1, // –º–µ—Å—è—Ü—ã –≤ JavaScript –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å 0
                parseInt(day),
                parseInt(hour),
                parseInt(minute),
                parseInt(second)
            ));
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–∞–π–º–∑–æ–Ω—É
            const tzOffsetMinutes = parseInt(tzHour) * 60 + parseInt(tzMinute);
            const multiplier = tzSign === '+' ? -1 : 1; // –≤ JavaScript —Å–º–µ—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
            date = new Date(date.getTime() + (multiplier * tzOffsetMinutes * 60000));
            
            return date;
        }
        
        // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        // –ù–µ–∫–æ—Ç–æ—Ä—ã–µ PDF –º–æ–≥—É—Ç –∏–º–µ—Ç—å —É—Å–µ—á–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        const partialDateRegex = /^(\d{4})(\d{2})(\d{2})$/;
        const partialMatch = cleanDate.match(partialDateRegex);
        if (partialMatch) {
            const [, year, month, day] = partialMatch;
            return new Date(parseInt(year), parseInt(month) - 1, parseInt(day));
        }
        
        return null;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
    async handlePdfFile(file, item, previewDiv, parentOperationId = null) {
        const operationId = this.logger.pushOperation('handlePdfFile', { filename: item.filename, parentOperationId });
        try {
            this.logger.debug('–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF —Ñ–∞–π–ª–∞', { filename: item.filename, operationId });
            
            // –ü–æ–ª—É—á–∞–µ–º ArrayBuffer –∏–∑ —Ñ–∞–π–ª–∞ ZIP
            const arrayBuffer = await file.async('arraybuffer');
            this.logger.debug('ArrayBuffer –ø–æ–ª—É—á–µ–Ω', { size: arrayBuffer.byteLength, operationId });
            
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é ArrayBuffer –¥–ª—è data URL –¥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ PDF.js
            const arrayBufferCopy = arrayBuffer.slice(0);
            const uint8Array = new Uint8Array(arrayBufferCopy);
            const dataUrl = `data:application/pdf;base64,${this.arrayBufferToBase64(uint8Array)}`;
            this.logger.debug('Data URL —Å–æ–∑–¥–∞–Ω –¥–ª—è PDF', { operationId });
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é PDF.js (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ArrayBuffer)
            const pdfDocument = await pdfjsLib.getDocument(arrayBuffer).promise;
            this.logger.debug('PDF –¥–æ–∫—É–º–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω', { pages: pdfDocument.numPages, operationId });
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const metadata = await pdfDocument.getMetadata();
            this.logger.debug('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω—ã', { hasMetadata: !!metadata.info, operationId });
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º HTML –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ PDF –∫–∞–∫ –¥–≤—É—Ö –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ø–æ–π–ª–µ—Ä–æ–≤
            let metadataHtml = '';
            if (metadata && metadata.info) {
                const info = metadata.info;
                this.logger.debug('–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö PDF', { metadataKeys: Object.keys(info), operationId });
                metadataHtml = `
                    <details class="pdf-metadata-details">
                        <summary class="pdf-metadata-summary" aria-label="–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF —Ñ–∞–π–ª–∞ ${this.escapeHtml(item.title)}">
                            üìÑ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF
                        </summary>
                        <div class="pdf-metadata-content">
                            <div class="metadata-grid">
                `;
                
                if (info.Title) {
                    this.logger.debug('–ó–∞–≥–æ–ª–æ–≤–æ–∫ PDF', { title: info.Title, operationId });
                    metadataHtml += `
                        <strong class="metadata-field-main">–ó–∞–≥–æ–ª–æ–≤–æ–∫:</strong>
                        <span>${this.escapeHtml(info.Title)}</span>
                    `;
                }
                if (info.Author) {
                    this.logger.debug('–ê–≤—Ç–æ—Ä PDF', { author: info.Author, operationId });
                    metadataHtml += `
                        <strong class="metadata-field-main">–ê–≤—Ç–æ—Ä:</strong>
                        <span>${this.escapeHtml(info.Author)}</span>
                    `;
                }
                if (info.Subject) {
                    this.logger.debug('–¢–µ–º–∞ PDF', { subject: info.Subject, operationId });
                    metadataHtml += `
                        <strong class="metadata-field-main">–¢–µ–º–∞:</strong>
                        <span>${this.escapeHtml(info.Subject)}</span>
                    `;
                }
                if (info.Keywords) {
                    this.logger.debug('–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ PDF', { keywords: info.Keywords, operationId });
                    metadataHtml += `
                        <strong class="metadata-field-main">–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:</strong>
                        <span>${this.escapeHtml(info.Keywords)}</span>
                    `;
                }
                if (info.CreationDate) {
                    const creationDate = this.parsePdfDate(info.CreationDate);
                    if (creationDate && !isNaN(creationDate.getTime())) {
                        this.logger.debug('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF', { creationDate: creationDate.toISOString(), operationId });
                        metadataHtml += `
                            <strong class="metadata-field-secondary">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong>
                            <span class="metadata-field-secondary">${creationDate.toLocaleString('ru-RU', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit',
                                timeZoneName: 'short'
                            })}</span>
                        `;
                    } else {
                        this.logger.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è PDF', { rawDate: info.CreationDate, operationId });
                        metadataHtml += `
                            <strong class="metadata-field-secondary">–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong>
                            <span class="metadata-field-secondary">${this.escapeHtml(info.CreationDate)}</span>
                        `;
                    }
                }
                if (info.ModDate) {
                    const modDate = this.parsePdfDate(info.ModDate);
                    if (modDate && !isNaN(modDate.getTime())) {
                        this.logger.debug('–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è PDF', { modDate: modDate.toISOString(), operationId });
                        metadataHtml += `
                            <strong class="metadata-field-secondary">–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</strong>
                            <span class="metadata-field-secondary">${modDate.toLocaleString('ru-RU', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit',
                                timeZoneName: 'short'
                            })}</span>
                        `;
                    } else {
                        this.logger.warn('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è PDF', { rawDate: info.ModDate, operationId });
                        metadataHtml += `
                            <strong class="metadata-field-secondary">–î–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</strong>
                            <span class="metadata-field-secondary">${this.escapeHtml(info.ModDate)}</span>
                        `;
                    }
                }
                if (info.Creator) {
                    this.logger.debug('–°–æ–∑–¥–∞–Ω–æ PDF', { creator: info.Creator, operationId });
                    metadataHtml += `
                        <strong class="metadata-field-secondary">–°–æ–∑–¥–∞–Ω–æ:</strong>
                        <span class="metadata-field-secondary">${this.escapeHtml(info.Creator)}</span>
                    `;
                }
                if (info.Producer) {
                    this.logger.debug('–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ PDF', { producer: info.Producer, operationId });
                    metadataHtml += `
                        <strong class="metadata-field-secondary">–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:</strong>
                        <span class="metadata-field-secondary">${this.escapeHtml(info.Producer)}</span>
                    `;
                }
                if (info.PDFFormatVersion) {
                    this.logger.debug('–í–µ—Ä—Å–∏—è PDF', { version: info.PDFFormatVersion, operationId });
                    metadataHtml += `
                        <strong class="metadata-field-secondary">–í–µ—Ä—Å–∏—è PDF:</strong>
                        <span class="metadata-field-secondary">${this.escapeHtml(info.PDFFormatVersion)}</span>
                    `;
                }
                
                metadataHtml += `
                            </div>
                            <div class="metadata-page-count">
                                <strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü:</strong> ${pdfDocument.numPages}
                            </div>
                        </div>
                    </details>
                `;
            }
            
            // –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å–ø–æ–π–ª–µ—Ä –¥–ª—è PDF —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            const pdfContentHtml = `
                <details class="pdf-content-details">
                    <summary class="pdf-content-summary" aria-label="–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ PDF —Ñ–∞–π–ª–∞ ${this.escapeHtml(item.title)}">
                        üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä PDF
                    </summary>
                    <div class="pdf-content-content">
                        <iframe class="pdf-viewer" src="${this.escapeHtml(dataUrl)}"></iframe>
                        <div class="pdf-download-section">
                            <a href="${this.escapeHtml(dataUrl)}" download="${this.escapeHtml(item.filename)}" class="download-link">
                                üì• –°–∫–∞—á–∞—Ç—å PDF
                            </a>
                        </div>
                    </div>
                </details>
            `;
            
            previewDiv.innerHTML = `
                ${metadataHtml}
                ${pdfContentHtml}
            `;
            this.logger.info('PDF –∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω', { filename: item.filename, operationId });
        } catch (e) {
            this.logger.logError(e, { operationId });
            try {
                // –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                const pdfBlob = await file.async('blob');
                const pdfUrl = URL.createObjectURL(pdfBlob);
                this.logger.debug('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å blob URL', { operationId });
                previewDiv.innerHTML = `
                    <iframe class="pdf-viewer" src="${this.escapeHtml(pdfUrl)}"></iframe>
                    <div style="margin-top: 10px;">
                        <a href="${this.escapeHtml(pdfUrl)}" download="${this.escapeHtml(item.filename)}" class="download-link">
                            üì• –°–∫–∞—á–∞—Ç—å PDF
                        </a>
                    </div>
                `;
                
                this.pdfUrls.push(pdfUrl);
            } catch (blobError) {
                this.logger.logError(blobError, { operationId });
                // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ - —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
                previewDiv.innerHTML = `
                    <p class="error">–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å PDF. <a href="#" onclick="event.preventDefault(); alert('PDF –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–∞—á–∞–π—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.')" class="download-link">‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ</a></p>
                    <div style="margin-top: 10px;">
                        <a href="${this.escapeHtml(URL.createObjectURL(await file.async('blob')))}" download="${this.escapeHtml(item.filename)}" class="download-link">
                            üì• –°–∫–∞—á–∞—Ç—å PDF
                        </a>
                    </div>
                `;
            }
        } finally {
            this.logger.popOperation();
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è ArrayBuffer –≤ base64
    arrayBufferToBase64(buffer) {
        let binary = '';
        const bytes = new Uint8Array(buffer);
        for (let i = 0; i < bytes.byteLength; i++) {
            binary += String.fromCharCode(bytes[i]);
        }
        return btoa(binary);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV
    async handleCsvFile(file, item, previewDiv, parentOperationId = null) {
        const operationId = this.logger.pushOperation('handleCsvFile', { filename: item.filename, parentOperationId });
        try {
            const csvText = await file.async('text');
            const results = Papa.parse(csvText, { header: true });
            if (results.data.length > 0 && results.data[0]) {
                let tableHtml = '<table class="data-table"><thead><tr>';
                // –ó–∞–≥–æ–ª–æ–≤–∫–∏
                Object.keys(results.data[0]).forEach(key => {
                    tableHtml += `<th>${this.escapeHtml(key)}</th>`;
                });
                tableHtml += '</tr></thead><tbody>';
                // –î–∞–Ω–Ω—ã–µ
                results.data.forEach(row => {
                    tableHtml += '<tr>';
                    Object.values(row).forEach(cell => {
                        tableHtml += `<td>${this.escapeHtml(String(cell))}</td>`;
                    });
                    tableHtml += '</tr>';
                });
                tableHtml += '</tbody></table>';
                previewDiv.innerHTML = tableHtml;
                this.logger.debug('CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞', { filename: item.filename, rows: results.data.length, operationId });
            } else {
                const blob = await file.async('blob');
                const url = URL.createObjectURL(blob);
                previewDiv.innerHTML = `
                    <a href="${this.escapeHtml(url)}" download="${this.escapeHtml(item.filename)}" class="download-link">
                        üì• –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª (${this.escapeHtml(item.filename)})
                    </a>
                `;
                this.csvUrls.push(url);
                this.logger.debug('CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∫–∞–∫ —Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è', { filename: item.filename, operationId });
            }
        } catch (e) {
            this.logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ CSV —Ñ–∞–π–ª–∞, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥', { error: e.message, operationId });
            try {
                const blob = await file.async('blob');
                const url = URL.createObjectURL(blob);
                previewDiv.innerHTML = `
                    <a href="${this.escapeHtml(url)}" download="${this.escapeHtml(item.filename)}" class="download-link">
                        üì• –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª (${this.escapeHtml(item.filename)})
                    </a>
                `;
                this.csvUrls.push(url);
                this.logger.debug('CSV —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ blob', { filename: item.filename, operationId });
            } catch (blobError) {
                this.logger.logError(blobError, { operationId });
                previewDiv.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: ${this.escapeHtml(blobError.message)}</p>`;
            }
        } finally {
            this.logger.popOperation();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    async handleTextFile(file, item, previewDiv, parentOperationId = null) {
        const operationId = this.logger.pushOperation('handleTextFile', { filename: item.filename, parentOperationId });
        try {
            const text = await file.async('text');
            previewDiv.innerHTML = `<pre class="text-content">${this.escapeHtml(text)}</pre>`;
            this.logger.debug('–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ', { filename: item.filename, textLength: text.length, operationId });
        } catch (e) {
            this.logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥', { error: e.message, operationId });
            try {
                const blob = await file.async('blob');
                const url = URL.createObjectURL(blob);
                previewDiv.innerHTML = `
                    <a href="${this.escapeHtml(url)}" download="${this.escapeHtml(item.filename)}" class="download-link">
                        üì• –°–∫–∞—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (${this.escapeHtml(item.filename)})
                    </a>
                `;
                this.textUrls.push(url);
                this.logger.debug('–¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ blob', { filename: item.filename, operationId });
            } catch (blobError) {
                this.logger.logError(blobError, { operationId });
                previewDiv.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: ${this.escapeHtml(blobError.message)}</p>`;
            }
        } finally {
            this.logger.popOperation();
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    async handleDefaultFile(file, item, previewDiv, parentOperationId = null) {
        const operationId = this.logger.pushOperation('handleDefaultFile', { filename: item.filename, parentOperationId });
        try {
            const fileData = await file.async('base64');
            const fileUrl = `data:application/octet-stream;base64,${fileData}`;
            previewDiv.innerHTML = `
                <a href="${this.escapeHtml(fileUrl)}" download="${this.escapeHtml(item.filename)}" class="download-link">
                    üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª (${this.escapeHtml(item.filename)})
                </a>
            `;
            this.logger.debug('–§–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ base64', { filename: item.filename, operationId });
        } catch (e) {
            this.logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥', { error: e.message, operationId });
            try {
                const blob = await file.async('blob');
                const url = URL.createObjectURL(blob);
                previewDiv.innerHTML = `
                    <a href="${this.escapeHtml(url)}" download="${this.escapeHtml(item.filename)}" class="download-link">
                        üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª (${this.escapeHtml(item.filename)})
                    </a>
                `;
                this.defaultUrls.push(url);
                this.logger.debug('–§–∞–π–ª –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ blob', { filename: item.filename, operationId });
            } catch (blobError) {
                this.logger.logError(blobError, { operationId });
                previewDiv.innerHTML = `<p class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ${this.escapeHtml(blobError.message)}</p>`;
            }
        } finally {
            this.logger.popOperation();
        }
    }

    // –ü–æ–∫–∞–∑ –æ—à–∏–±–∫–∏
    showError(message) {
        this.updateGlobalStatus(message, 'error');
        this.logger.error(message);
    }

    // –û—á–∏—Å—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    clearGlobalStatus() {
        const globalUploadStatus = document.getElementById('global-upload-status');
        if (globalUploadStatus) {
            globalUploadStatus.textContent = '';
            globalUploadStatus.className = 'upload-status';
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å hidden –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            globalUploadStatus.style.display = 'none';
        }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    updateGlobalStatus(message, statusType = 'info') {
        const globalUploadStatus = document.getElementById('global-upload-status');
        if (globalUploadStatus) {
            globalUploadStatus.textContent = message;
            globalUploadStatus.className = `upload-status ${statusType}`;
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            globalUploadStatus.style.display = message ? 'block' : 'none';
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ ID –¥–ª—è HTML —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    generateSafeId(filename) {
        if (typeof filename !== 'string') return 'unknown';
        
        // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
        const nameWithoutExt = filename.replace(/\.[^/.]+$/, "");
        
        // –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ –±—É–∫–≤, —Ü–∏—Ñ—Ä, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –∏ –¥–µ—Ñ–∏—Å–æ–≤, –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        // –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        let safeId = nameWithoutExt.replace(/[^\w\u0400-\u04FF\u00C0-\u00FF-]/g, '_');
        
        // –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –∏ –¥–µ—Ñ–∏—Å—ã
        safeId = safeId.replace(/[_-]+/g, '_');
        
        // –£–¥–∞–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∏ –∫–æ–Ω–µ—á–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è/–¥–µ—Ñ–∏—Å—ã
        safeId = safeId.replace(/^[_-]|[_-]$/g, '');
        
        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º 'file'
        if (!safeId) safeId = 'file';
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å —Ü–∏—Ñ—Ä–∞–º–∏ –≤ –Ω–∞—á–∞–ª–µ
        if (/^\d/.test(safeId)) {
            safeId = 'file_' + safeId;
        }
        
        return safeId;
    }

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ - –ù–ï –∏–∑–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    sanitizeFilename(filename) {
        if (typeof filename !== 'string') return '';
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –ø—É—Ç–∏
        if (filename.includes('../') || filename.includes('..\\')) {
            this.logger.warn('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞', { filename });
            return '';
        }
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞, —Ç–æ–ª—å–∫–æ —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ç—Ä–æ–∫–∏
        return filename.replace(/[\r\n]/g, '');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏–≤–∞
    validateArchive(items) {
        const operationId = this.logger.pushOperation('validateArchive', { itemsCount: items.length });
        try {
            const validationSection = document.getElementById('validation-section');
            const validationDetailsContainer = document.getElementById('validation-details-container');
            const newsCountElement = document.getElementById('news-count');
            const personalCountElement = document.getElementById('personal-count');
            const keywordsStatusElement = document.getElementById('keywords-status');
            const newsStatusElement = document.getElementById('news-status');
            const personalStatusElement = document.getElementById('personal-status');
            const keywordsValidationStatusElement = document.getElementById('keywords-validation-status');
            const validationFilesListElement = document.getElementById('validation-files-list');

            if (!validationSection) return;

            // –ü–æ–¥—Å—á–µ—Ç —Ñ–∞–π–ª–æ–≤ –ø–æ —Ç–∏–ø–∞–º
            let newsCount = 0;
            let mediaCount = 0;
            let personalCount = 0;
            let filesWithValidKeywords = 0;
            let totalFiles = items.length;

            items.forEach((item, index) => {
                const itemType = item.type.toUpperCase();
                if (itemType === '–ù–û–í–û–°–¢–¨') newsCount++;
                else if (itemType === '–ú–ï–î–ò–ê') mediaCount++;
                else if (itemType === '–õ–ò–ß–ù–û–ï') personalCount++;

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                if (item.tags.length >= 5) {
                    filesWithValidKeywords++;
                }
            });

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤
            if (newsCountElement) newsCountElement.textContent = `${newsCount}/5`;
            if (mediaCountElement) mediaCountElement.textContent = `${mediaCount}/5`;
            if (personalCountElement) personalCountElement.textContent = `${personalCount}/2`;
            if (keywordsStatusElement) keywordsStatusElement.textContent = `${filesWithValidKeywords}/${totalFiles}`;

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤
            if (newsStatusElement) newsStatusElement.textContent = newsCount >= 5 ? '‚úÖ' : '‚ùå';
            if (mediaStatusElement) mediaStatusElement.textContent = mediaCount >= 5 ? '‚úÖ' : '‚ùå';
            if (personalStatusElement) personalStatusElement.textContent = personalCount >= 2 ? '‚úÖ' : '‚ùå';
            if (keywordsValidationStatusElement) {
                keywordsValidationStatusElement.textContent = filesWithValidKeywords === totalFiles ? '‚úÖ' : '‚ùå';
            }

            // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π —Ç–µ–≥–æ–≤
            if (validationFilesListElement) {
                let filesHtml = '<h4>–§–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–µ:</h4>';
                items.forEach((item, index) => {
                    const hasValidTags = item.tags.length >= 5;
                    const tagStatus = hasValidTags ? '‚úÖ' : '‚ùå';
                    const tagCount = item.tags.length;
                    const requiredTags = 5;
                    
                    filesHtml += `
                        <div class="validation-file-item">
                            <div class="validation-file-header">
                                <span class="validation-file-name">${this.escapeHtml(item.title || item.filename)}</span>
                                <span class="validation-file-type">${this.escapeHtml(item.type)}</span>
                                <span class="validation-file-status">${tagStatus}</span>
                            </div>
                            <div class="validation-file-tags">
                                –¢–µ–≥–∏: ${tagCount}/${requiredTags} ${!hasValidTags ? `(–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –µ—â–µ ${requiredTags - tagCount})` : ''}
                            </div>
                        </div>
                    `;
                });
                validationFilesListElement.innerHTML = filesHtml;
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏
            validationSection.hidden = false;
            validationDetailsContainer.removeAttribute('hidden');
            
            this.logger.debug('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { 
                newsCount, mediaCount, personalCount, filesWithValidKeywords, totalFiles, operationId 
            });

        } catch (error) {
            this.logger.logError(error, { operationId });
        } finally {
            this.logger.popOperation();
        }
    }

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞—Ä—Ö–∏–≤–µ
    async populateSidebar(items) {
        const operationId = this.logger.pushOperation('populateSidebar', { itemsCount: items.length });
        try {
            const fileCountElement = document.getElementById('file-count');
            const fileListElement = document.getElementById('file-list');

            if (fileCountElement) {
                fileCountElement.textContent = `–§–∞–π–ª–æ–≤: ${items.length}`;
            }

            if (fileListElement) {
                fileListElement.innerHTML = '';

                for (let i = 0; i < items.length; i++) {
                    const item = items[i];
                    const listItem = document.createElement('li');
                    listItem.className = 'archive-nav-item';
                    
                    // –î–ª—è PDF —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –∫–∞–∫ –≤ renderArchiveItem
                    let displayTitle = item.title; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞
                    
                    if (item.filename.toLowerCase().endsWith('.pdf')) {
                        const pdfFile = this.zip.file(item.filename);
                        if (pdfFile) {
                            try {
                                const arrayBuffer = await pdfFile.async('arraybuffer');
                                const pdfDocument = await pdfjsLib.getDocument(arrayBuffer).promise;
                                const metadata = await pdfDocument.getMetadata();
                                
                                if (metadata && metadata.info && metadata.info.Title) {
                                    displayTitle = metadata.info.Title;
                                }
                            } catch (error) {
                                this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ PDF –¥–ª—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏', { error: error.message, filename: item.filename });
                                // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                            }
                        }
                    }
                    
                    listItem.innerHTML = `
                        <span>${this.getItemEmoji(item.type)}</span>
                        <span>${i + 1}. </span>
                        <span>${this.escapeHtml(displayTitle)}</span>
                    `;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –∫ —ç–ª–µ–º–µ–Ω—Ç—É –∞—Ä—Ö–∏–≤–∞
                    listItem.addEventListener('click', () => {
                        const targetElement = document.querySelector(`#archive-container .archive-item:nth-child(${i + 1})`);
                        if (targetElement) {
                            targetElement.scrollIntoView({ behavior: 'smooth', block: 'center' });
                            // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫ —ç–ª–µ–º–µ–Ω—Ç—É
                            targetElement.style.backgroundColor = '#e3f2fd';
                            setTimeout(() => {
                                targetElement.style.backgroundColor = '';
                            }, 200);
                        }
                    });

                    fileListElement.appendChild(listItem);
                }
                this.logger.debug('–ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞', { itemsCount: items.length, operationId });
            }
        } catch (error) {
            this.logger.logError(error, { operationId });
        } finally {
            this.logger.popOperation();
        }
    }

    // –û—á–∏—Å—Ç–∫–∞ URL –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
    cleanupUrls() {
        const operationId = this.logger.pushOperation('cleanupUrls');
        try {
            [...this.imageUrls, ...this.videoUrls, ...this.audioUrls, 
             ...this.pdfUrls, ...this.csvUrls, ...this.textUrls, ...this.defaultUrls]
            .forEach(url => {
                try {
                    URL.revokeObjectURL(url);
                    this.logger.debug('URL –æ—á–∏—â–µ–Ω', { url, operationId });
                } catch (e) {
                    this.logger.debug('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ URL', { error: e.message, url, operationId });
                }
            });
            
            this.imageUrls = [];
            this.videoUrls = [];
            this.audioUrls = [];
            this.pdfUrls = [];
            this.csvUrls = [];
            this.textUrls = [];
            this.defaultUrls = [];
            this.logger.info('URL –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { operationId });
        } catch (error) {
            this.logger.logError(error, { operationId });
        } finally {
            this.logger.popOperation();
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
document.addEventListener('DOMContentLoaded', () => {
    new DigitalTimeCapsule();
});
